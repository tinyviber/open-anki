#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
REPO_ROOT=$(cd "${SCRIPT_DIR}/../.." && pwd)
SUPABASE_ENV_FILE="${REPO_ROOT}/supabase/.env"
FRONTEND_ENV_FILE="${REPO_ROOT}/packages/frontend/.env"

if [[ ! -f "${SUPABASE_ENV_FILE}" ]]; then
  cat <<MSG >&2
supabase/.env not found at ${SUPABASE_ENV_FILE}.
Run ./scripts/devcontainer/bootstrap-supabase.sh to generate it before syncing the frontend environment.
MSG
  exit 1
fi

set -a
# shellcheck disable=SC1090
source "${SUPABASE_ENV_FILE}"
set +a

supabase_url="${SUPABASE_URL:-}"

# 优先使用 Supabase 提供的 REST URL（本地 CLI 会写入 127.0.0.1:54321）
if [[ -z "${supabase_url}" && -n "${SUPABASE_REST_URL:-}" ]]; then
  supabase_url="${SUPABASE_REST_URL}"
fi

# 如果仍然缺失，再从 DATABASE_URL 中提取 host，并回退到默认 API 端口
if [[ -z "${supabase_url}" && -n "${DATABASE_URL:-}" ]]; then
  # postgresql://user:pass@host:port/dbname
  db_host=$(echo "${DATABASE_URL}" | sed -E 's|^postgresql://[^@]+@([^/:]+)(:[0-9]+)?/.*$|\1|')
  supabase_url="http://${db_host}:54321"
fi

supabase_anon_key="${SUPABASE_ANON_KEY:-}"

missing=()
if [[ -z "${supabase_url}" ]]; then
  missing+=("SUPABASE_URL")
fi
if [[ -z "${supabase_anon_key}" ]]; then
  missing+=("SUPABASE_ANON_KEY")
fi

if (( ${#missing[@]} > 0 )); then
  printf 'Missing required variables in %s: %s\n' "${SUPABASE_ENV_FILE}" "${missing[*]}" >&2
  exit 1
fi

cat <<ENV > "${FRONTEND_ENV_FILE}"
# Auto-generated by scripts/devcontainer/sync-frontend-env.sh
# Do not edit manually; rerun the sync script if you need to refresh values.
VITE_SUPABASE_URL=${supabase_url}
VITE_SUPABASE_ANON_KEY=${supabase_anon_key}
ENV

echo "Frontend environment written to ${FRONTEND_ENV_FILE}"
